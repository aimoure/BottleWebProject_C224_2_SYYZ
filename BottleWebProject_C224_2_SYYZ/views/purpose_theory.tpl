% rebase('layout.tpl', title=title, year=year)

<!-- Подключение MathJax -->
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async
        src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

<div class="hungarian-page">

    <!-- Шапка -->
    <div class="jumbotron">
        <h1>Задача о назначениях (Венгерский алгоритм)</h1>
        <p class="lead">Суть задачи о назначениях состоит в том, чтобы оптимально распределить задания между исполнителями таким образом,
        чтобы минимизировать общие затраты или максимизировать общую эффективность</p>
        <p>
            <a href="/purpose_practice" class="btn btn-warning btn-lg mt-3">Перейти к калькулятору</a>
        </p>
    </div>

    <!-- Уникальный контейнер -->
    <div class="container">
        <h2>Что это такое?</h2>
        <p>
            Венгерский алгоритм — метод оптимизации, который помогает решить <strong>задачу о назначениях</strong>.
            То есть: как распределить исполнителей по задачам, чтобы суммарные затраты были минимальны, либо эффективность — максимальна.
        </p>

        <div class="task-container">
            <img src="/static/images/Condition.png" alt="Условие" class="task-image">
            <h2>Пример задачи</h2>
            <p>У нас есть 5 организаторов и 5 задач:</p>
            <ul>
                <li>настройка звука</li>
                <li>освещение</li>
                <li>изображение</li>
                <li>регистрация гостей</li>
                <li>кофе-брейки</li>
            </ul>
        </div>

        <p>Каждому организатору даны оценки по задачам. Нужно распределить их, чтобы суммарный балл был максимален.</p>

        <h2>Преобразование "максимум" в "минимум"</h2>
        <p>Если задача формулируется на максимум, можно преобразовать матрицу:</p>
        <ul>
            <li>Найти максимальный элемент строки \( \max(x_i) \)</li>
            <li>Вычесть каждый элемент строки: \( x'_j = \max(x_i) - x_j \)</li>
            <li>Можно также умножить матрицу на -1</li>
        </ul>

        <h2>Шаг 1: Редукция по строкам</h2>
        <p>Из каждого элемента строки вычитаем минимальный элемент строки:</p>
        <img src="/static/images/Step1.png" alt="Редукция по строкам" class="img-fluid">

        <h2>Шаг 2: Редукция по столбцам</h2>
        <p>Аналогично — из каждого столбца вычитаем его минимум:</p>
        <img src="/static/images/Step2.png" alt="Редукция по столбцам" class="img-fluid">

        <h2>Шаг 3: Покрытие нулей</h2>
        <p>
            Смотрим чтобы в каждом столбце и в каждой строке был только один выбранный ноль.
            Как видно ниже, в данном случае это сделать невозможно. Два варианта как можно это сделать:
        </p>
        <img src="/static/images/Step3_1.png" alt="Нули" class="img-fluid">

        <p>
            Продолжаем решение дальше. Вычеркиваем строки и столбцы, которые содержат нулевые элементы (ВАЖНО! 
            Количество вычеркиваний должно быть минимальным). Среди оставшихся элементов ищем минимальный, 
            вычитаем его из оставшихся элементов (которые не зачеркнуты) и прибавляем к элементам, которые расположены на 
            пересечении вычеркнутых строк и столбцов.
        </p>
        <img src="/static/images/Step3_2.png" alt="Нули" class="img-fluid">

        <h2>Шаг 4: Построение новой матрицы</h2>
        <p>Как теперь видно, в каждом столбце и строке есть только один выбранный ноль. Решение задачи завершаем!</p>
        <img src="/static/images/Step4.png" alt="Нули" class="img-fluid">

        <h2>Шаг 5: Оптимальное назначение</h2>
        <p>
            Подставляем в начальную таблицу месторасположения выбранных нулей. Таким образом мы получаем оптимум,
            или оптимальный план, при котором организаторы распределены по работам и сумма оценок получилась максимальной.
        </p>
        <img src="/static/images/Step5.png" alt="Нули" class="img-fluid">

        <p>
            Если же вы решаете задачу и у вас до сих пор невозможно выбрать нули так, чтобы в каждом столбце и строке был только один,
            тогда повторяем алгоритм с того места где проводилась редукция по строкам.
        </p>

        <h2>Формальная модель задачи</h2>
        <p>
            Пусть \( C = [c_{ij}] \) — матрица затрат. Нужно найти бинарную матрицу назначений \( X = [x_{ij}] \), такую что:
        </p>
        <p>
            \[
            \sum_{i=1}^n \sum_{j=1}^n c_{ij}x_{ij} \rightarrow \min,
            \]
            при условиях:
            \[
            \sum_{j=1}^n x_{ij} = 1, \quad \sum_{i=1}^n x_{ij} = 1, \quad x_{ij} \in \{0, 1\}
            \]
        </p>

        <h2>Когда можно применять метод?</h2>
        <p>Венгерский алгоритм работает, если задача <strong>закрытая</strong>: количество исполнителей \( = \) количеству задач. То есть:</p>
        <p>\[ n = m \]</p>
        <p>Если это не так — добавляем фиктивных исполнителей или задачи с нулевыми затратами.</p>
        
        <hr>
        <div class="calc-start-section text-center">
            <h1 class="mb-4">Готовы решить свою задачу?</h1>
            <a href="/purpose_practice" class="btn btn-primary btn-lg">Перейти к калькулятору</a>
        </div>
    </div>
</div>
